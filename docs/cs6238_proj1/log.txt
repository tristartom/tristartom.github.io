login
 make sense for incorrect features.

init
 impl of lagrange interpolation
  e: cant reconstruct hpwd->wrong x value
  e: reconstructed hpwd is smaller by 1, for certain true/false (ttttf, ttfff).
   in func "Util.lagrangeInterpolation()", use double to store divided results, which is not precise.
   use BigDecimal rather than double
    e: java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result
     add scale and rounding mode in divide function, like divide(..., 100, RoundingMode.HALF_UP)
   e: incorrect password for pattern tftff, but not for tffff. no help tuning precision scale.
    er: tftff, hpwd is 66783.00435325603999651583400000000000000000000; tffff, it is 66782.98092337593000000000000000000000000000000.
    es: should round it off, rather than intValue() (essentially, casting).
 encrypt file; use pbe as keyed hash function to encrypt file (cipherXXXputStream)
   e:cant recover data->do use paired marshell/unmarshell before encryption/decryption. (like readObject/writeObject)
   e:java.security.spec.InvalidKeySpecException: Password is not ASCII
     er: use Util.intToCharArray(int) as key for pbe cipher.
     es: use com.sun.org.apache.xml.internal.security.utils.Base64.encode(*) in jdk, not the others! (there are multipleBase64.java in jdk's package.) 

update
 update history file
 update instruction table
 
test encryption primitives
 use password based encryption
 e: not size of multiple 8
 e: Given final block not properly padded
  used decryption mode in encryption function.

history file with constant size
 pad HistoryFile before stuff into cipherstream; put empty record into data store, at the learning stage when store is not filled up yet. 

todo
 use p(i) rather than i as input x to polynomial func
 random hpwd w/ 160 bit. (cant represent w/ single int, need 20 ints; also need to change polynomial func).
 use formular in paper to encrypt/decrypt elements in instruction table.
 random coefficients as big number (int representation not suffice for y value of polynomial func)
 -if there are 10 features, poly will be at x^10 and x could be as large as 20, in which case y(20) can not be represented by a single int.
 -now we consider 8 features w/ x = 16, so y is as large as 16^8=2^32. or we focus on the case where there is no more than 6 features.
 how to generate big prime number
 idea?: if user is very stable in table-setup phase but fructuate after table is set up, the table may constantly reject the deviating behavior?
