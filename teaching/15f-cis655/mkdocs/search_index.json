{
    "docs": [
        {
            "location": "/", 
            "text": "CIS655/CSE661: Advanced Computer Architecture\n\n\nInstructor: Yuzhe (Richard) Tang\n\n\nLecture schedule\n\n\n\n\n\n\n\n\nTopic\n\n\nSession\n\n\nChapter\n\n\nSlides\n\n\n\n\n\n\n\n\n\n\n1.Overview\n\n\nintro\n\n\n1\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n1.Overview\n\n\nmetrics\n\n\n1\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n2.CPU\n\n\nILP \n pipelining\n\n\nA\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n2.CPU\n\n\ndata hazard by compiler\n\n\n3\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n2.CPU\n\n\nbranch hazard by HW\n\n\nC.2,3.3,3.9\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n2.CPU\n\n\ndata hazard by HW, a.k.a tomasulo\n\n\n3.4,3.5,3.6,3.9\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n2.CPU\n\n\nmulti-issue \n SIMD\n\n\n\n\n[\nlink to BB\n]\n\n\n\n\n\n\n3.Memory\n\n\ncache\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n3.Memory\n\n\ncache2\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n3.Memory\n\n\nmemory\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n4.Multi-processing\n\n\nmultiprocessing\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n4.Multi-processing\n\n\ncache-MP\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n4.Multi-processing\n\n\nsynchronization\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n4.Multi-processing\n\n\nmany-core\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n5.IO\n\n\ninterconnect\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n5.IO\n\n\ninterconnect2\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n5.IO\n\n\nstorage\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n5.IO\n\n\nstore\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n6.WSC \n misc\n\n\nwsc\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n6.WSC \n misc\n\n\nsoftware in wsc\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n6.WSC \n misc\n\n\ninfrastructure\n\n\n\n\n[\nTBA\n]\n\n\n\n\n\n\n6.WSC \n misc\n\n\nenergy\n\n\n\n\n[\nTBA\n]", 
            "title": "Home"
        }, 
        {
            "location": "/#cis655cse661-advanced-computer-architecture", 
            "text": "Instructor: Yuzhe (Richard) Tang", 
            "title": "CIS655/CSE661: Advanced Computer Architecture"
        }, 
        {
            "location": "/#lecture-schedule", 
            "text": "Topic  Session  Chapter  Slides      1.Overview  intro  1  [ link to BB ]    1.Overview  metrics  1  [ link to BB ]    2.CPU  ILP   pipelining  A  [ link to BB ]    2.CPU  data hazard by compiler  3  [ link to BB ]    2.CPU  branch hazard by HW  C.2,3.3,3.9  [ link to BB ]    2.CPU  data hazard by HW, a.k.a tomasulo  3.4,3.5,3.6,3.9  [ link to BB ]    2.CPU  multi-issue   SIMD   [ link to BB ]    3.Memory  cache   [ TBA ]    3.Memory  cache2   [ TBA ]    3.Memory  memory   [ TBA ]    4.Multi-processing  multiprocessing   [ TBA ]    4.Multi-processing  cache-MP   [ TBA ]    4.Multi-processing  synchronization   [ TBA ]    4.Multi-processing  many-core   [ TBA ]    5.IO  interconnect   [ TBA ]    5.IO  interconnect2   [ TBA ]    5.IO  storage   [ TBA ]    5.IO  store   [ TBA ]    6.WSC   misc  wsc   [ TBA ]    6.WSC   misc  software in wsc   [ TBA ]    6.WSC   misc  infrastructure   [ TBA ]    6.WSC   misc  energy   [ TBA ]", 
            "title": "Lecture schedule"
        }, 
        {
            "location": "/syl/", 
            "text": "Syllabus\n\n\nOutline\n\n\nCIS655/CSE661 teaches on the advanced topics of computer architecture.\nThe teaching puts an emphasis on the practical aspects by taking a programming-oriented approach.\n\n\nClass meetings\n\n\n\n\nWhen: TTh 8:00 - 9:20AM\n\n\nWhere: Watson Theater \n\n\n\n\nPrerequisite (Who should take the course?)\n\n\nThis course assumes students have good knowledge about system programming and assembly code (e.g. Linux POSIX, C/C++ and x86-64).\n\n\nTextbook\n\n\nComputer Architecture: A Quantitative Approach, 5th Edition, The Morgan Kaufmann Series in Computer Architecture and Design\n\n\nGrading policy\n\n\nSubmission of any work done by others will result in an F grade in the course, with the academic integrity violation reported to the University administration for further action. Violations include plagiarism, and usage of material available on the internet without proper attribution.\n\n\n\n\nClass participation (10%)\n\n\nHomework (30%)\n\n\nProject (25%)\n\n\nFinal exam (35%)\n\n\n\n\nTA and office hours\n\n\n\n\nTA:  \n\n\n\n\n\n\nJielong Xu: jxu21@syr.edu  Tuesday 3:30 to 4:30pm, CST 4-206A \n\n\n\n\n\n\n\n\n\n\nHari Krishna Gajarla: hgajarla@syr.edu, Wednesday 1:00 to 2:00 pm, CST 3-212\n\n\n\n\n\n\n\n\n\n\nHaoyi Shi: hshi05@syr.edu, Wednesday 2:00 to 3:00 pm, CST 4-206A \n\n\n\n\n\n\n\n\n\n\nShivakanth: sneelapp@syr.edu, Thursday 3:30 - 4:30pm, CST 4-206k\n\n\n\n\n\n\n\n\n\n\nKatchaguy (Bebe) Areekijseree: kareekij@syr.edu  \n\n\n\n\n\n\nInstructor: Yuzhe (Richard) Tang  \n\n\n\n\n\n\nEmail (teaching): teachingsu@hotmail.com (when you send email to me, include \n[CIS 655]\n in the subject.)  \n\n\n\n\n\n\n\n\n\n\nOffice hours: Tuesday 3:30 to 4:00pm, CST 4-206A \n\n\n\n\n\n\n\n\n\n\nOffice: 4-193, CST", 
            "title": "Syllabus"
        }, 
        {
            "location": "/syl/#syllabus", 
            "text": "", 
            "title": "Syllabus"
        }, 
        {
            "location": "/syl/#outline", 
            "text": "CIS655/CSE661 teaches on the advanced topics of computer architecture.\nThe teaching puts an emphasis on the practical aspects by taking a programming-oriented approach.", 
            "title": "Outline"
        }, 
        {
            "location": "/syl/#class-meetings", 
            "text": "When: TTh 8:00 - 9:20AM  Where: Watson Theater", 
            "title": "Class meetings"
        }, 
        {
            "location": "/syl/#prerequisite-who-should-take-the-course", 
            "text": "This course assumes students have good knowledge about system programming and assembly code (e.g. Linux POSIX, C/C++ and x86-64).", 
            "title": "Prerequisite (Who should take the course?)"
        }, 
        {
            "location": "/syl/#textbook", 
            "text": "Computer Architecture: A Quantitative Approach, 5th Edition, The Morgan Kaufmann Series in Computer Architecture and Design", 
            "title": "Textbook"
        }, 
        {
            "location": "/syl/#grading-policy", 
            "text": "Submission of any work done by others will result in an F grade in the course, with the academic integrity violation reported to the University administration for further action. Violations include plagiarism, and usage of material available on the internet without proper attribution.   Class participation (10%)  Homework (30%)  Project (25%)  Final exam (35%)", 
            "title": "Grading policy"
        }, 
        {
            "location": "/syl/#ta-and-office-hours", 
            "text": "TA:      Jielong Xu: jxu21@syr.edu  Tuesday 3:30 to 4:30pm, CST 4-206A       Hari Krishna Gajarla: hgajarla@syr.edu, Wednesday 1:00 to 2:00 pm, CST 3-212      Haoyi Shi: hshi05@syr.edu, Wednesday 2:00 to 3:00 pm, CST 4-206A       Shivakanth: sneelapp@syr.edu, Thursday 3:30 - 4:30pm, CST 4-206k      Katchaguy (Bebe) Areekijseree: kareekij@syr.edu      Instructor: Yuzhe (Richard) Tang      Email (teaching): teachingsu@hotmail.com (when you send email to me, include  [CIS 655]  in the subject.)        Office hours: Tuesday 3:30 to 4:00pm, CST 4-206A       Office: 4-193, CST", 
            "title": "TA and office hours"
        }, 
        {
            "location": "/proj/", 
            "text": "Course Project\n\n\nPolicy\n\n\nStudents can work in groups. But once groups are formed, collaboration is only allowed within the group. More specifically, \ninter-group collaboration is prohibited\n. Each group can have no more than 3 people.\n\n\nDeliverable\n\n\n\n\nMid-term report/presentation (40%): Formal survey of the technology with no less than 5 pages (format: 12-point font size on single-spaced 8.5\" x 11\u201d pages)   \n\n\nGroup with good mid-term report will be given an opportunity to do presentation in class. And \nin-class presentation will be awarded with bonus grades (extra 30%)\n\n\nFinal report (20%): Formal survey of the technology and project design \\\n implementation, no less than 10 pages (the same format to mid-term report).\n\n\nFinal program/demo (40%): Demo needs to allow other people to reproduce your results.\n\n\n\n\nTimeline\n\n\n\n\n\n\n\n\nWeek\n\n\nSchedule\n\n\n\n\n\n\n\n\n\n\nWeek 1-4\n\n\nform group and choose topic\n\n\n\n\n\n\nWeek 8\n\n\nmid-term report\n\n\n\n\n\n\nWeek 13\n\n\nfinal report/demo\n\n\n\n\n\n\n\n\nTopics (Tentative)\n\n\nChoose just one of the following topics. \n\n\nx86-64 ISA\n\n\n\n\nPage table and page-fault: intercept and analyze page-fault [\nlink\n]  \n\n\nReturn-oriented programming (ROP): formulate a working ROP attack [\nlink\n]  \n\n\nProgram data-dependency analysis [\nlink\n]  \n\n\n\n\nISA extensions\n\n\n\n\nSGX: understand SGX/CLS, write user-land code [\nlink\n]\n\n\nAVX: understand AVX/SIMD, write data-parallel program that demonstrates perf speedup [\nlink\n].  \n\n\nOther ideas: TrustZone by ARM[\nlink\n], MPX [\nlink\n]\n\n\n\n\nCloud interface\n\n\n\n\nAmazon AWS: set up AWS services in cloud and write a client program to interact cloud, [\nlink\n]\n\n\n\n\n\n\n\nProposing a new topic\n\n\nAlternatively, you can propose a project of your own interest. If you take this option, you have to:\n\n\n\n\nWrite a full-fledged project proposal, of at least two full pages (in the same format to mid-term report, see above), detailed in its relavence to \"computer architecture,\" and why it is a cutting-edge technology.\n\n\nSubmit a hello-world program and demonstrate its working. This is to prevent you from choosing \nunrealistic\n topics, such as \"studying quantum computer\", that in near future there will be no real system allowing you to implement any working code on it.", 
            "title": "Project-policy"
        }, 
        {
            "location": "/proj/#course-project", 
            "text": "", 
            "title": "Course Project"
        }, 
        {
            "location": "/proj/#policy", 
            "text": "Students can work in groups. But once groups are formed, collaboration is only allowed within the group. More specifically,  inter-group collaboration is prohibited . Each group can have no more than 3 people.", 
            "title": "Policy"
        }, 
        {
            "location": "/proj/#deliverable", 
            "text": "Mid-term report/presentation (40%): Formal survey of the technology with no less than 5 pages (format: 12-point font size on single-spaced 8.5\" x 11\u201d pages)     Group with good mid-term report will be given an opportunity to do presentation in class. And  in-class presentation will be awarded with bonus grades (extra 30%)  Final report (20%): Formal survey of the technology and project design \\  implementation, no less than 10 pages (the same format to mid-term report).  Final program/demo (40%): Demo needs to allow other people to reproduce your results.", 
            "title": "Deliverable"
        }, 
        {
            "location": "/proj/#timeline", 
            "text": "Week  Schedule      Week 1-4  form group and choose topic    Week 8  mid-term report    Week 13  final report/demo", 
            "title": "Timeline"
        }, 
        {
            "location": "/proj/#topics-tentative", 
            "text": "Choose just one of the following topics.   x86-64 ISA   Page table and page-fault: intercept and analyze page-fault [ link ]    Return-oriented programming (ROP): formulate a working ROP attack [ link ]    Program data-dependency analysis [ link ]     ISA extensions   SGX: understand SGX/CLS, write user-land code [ link ]  AVX: understand AVX/SIMD, write data-parallel program that demonstrates perf speedup [ link ].    Other ideas: TrustZone by ARM[ link ], MPX [ link ]   Cloud interface   Amazon AWS: set up AWS services in cloud and write a client program to interact cloud, [ link ]", 
            "title": "Topics (Tentative)"
        }, 
        {
            "location": "/proj/#proposing-a-new-topic", 
            "text": "Alternatively, you can propose a project of your own interest. If you take this option, you have to:   Write a full-fledged project proposal, of at least two full pages (in the same format to mid-term report, see above), detailed in its relavence to \"computer architecture,\" and why it is a cutting-edge technology.  Submit a hello-world program and demonstrate its working. This is to prevent you from choosing  unrealistic  topics, such as \"studying quantum computer\", that in near future there will be no real system allowing you to implement any working code on it.", 
            "title": "Proposing a new topic"
        }, 
        {
            "location": "/projs/sgx/", 
            "text": "SGX/ENCLS\n\n\nIntel SGX (Software Guard Extensions), a set of instructions and mechanisms for memory accesses added to future Intel\u00ae Architecture processors\nThe SGX extensions allow an application to instantiate a protected container, referred to as an \nenclave\n. An enclave is a protected area in the application\u2019s address space, which provides confidentiality and integrity even in the presence of privileged malware. Accesses to the enclave memory area from any software not resident in the enclave are prevented.\n\n\nMid-term report\n\n\nRead SGX document [\npdf\n] (mostly chapter 1,2,3 and 5), understand the semantics of SGX/ENCLS instructions (e.g. EINIT, EREPORT, EEXTEND, ECREATE, etc; see Chapter 5.3). \n\n\nAt its minimal, the mid-term report should include:\n\n\n\n\nThe semantics of each SGX system-level instructions (SGX ENCLS). You should explain the working of all ENCLS instructions in the following table (a copy of Table 5-1 from the SGX document).\n\n\nThe in-memory data structures used by SGX instructions (e.g. EPCM, TCS, SSA frames).\n\n\n\n\n\n\n\n\n\n\nInstr. Leaf\n\n\nEAX\n\n\nRBX\n\n\nRCX\n\n\nRDX\n\n\n\n\n\n\n\n\n\n\nECREATE\n\n\n00H (In)\n\n\nPAGEINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEADD\n\n\n01H (In)\n\n\nPAGEINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEINIT\n\n\n02H (In)\n\n\nSIGSTRUCT (In, EA)\n\n\nSECS (In, EA)\n\n\nEINITTOKEN (In, EA)\n\n\n\n\n\n\nEREMOVE\n\n\n03H (In)\n\n\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEDBGRD\n\n\n04H (In)\n\n\nResult Data (Out)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEDBGWR\n\n\n05H (In)\n\n\nSource Data (In)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEEXTEND\n\n\n06H (In)\n\n\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nELDB\n\n\n07H (In)\n\n\nPAGEINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\nVERSION (In, EA)\n\n\n\n\n\n\nELDU\n\n\n08H (In)\n\n\nPAGEINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\nVERSION (In, EA)\n\n\n\n\n\n\nEBLOCK\n\n\n09H (In)\n\n\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEPA\n\n\n0AH (In)\n\n\nPT_VA (In)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEWB\n\n\n0BH (In)\n\n\nPAGEINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\nVERSION (In, EA)\n\n\n\n\n\n\nETRACK\n\n\n0CH (In)\n\n\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEAUG\n\n\n0DH (In)\n\n\nPAGEINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\nLINADDR\n\n\n\n\n\n\nEMODPR\n\n\n0EH (In)\n\n\nSECINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEMODT\n\n\n0FH (In)\n\n\nSECINFO (In, EA)\n\n\nEPCPAGE (In, EA)\n\n\n\n\n\n\n\n\nEA: Effective Address\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJump-start tasks\n\n\n\n\nWrite a program that calls \nEINIT\n on the Ubuntu image with SGX emulator installed.\n\n\n\n\nMinimally-requirement tasks\n\n\n\n\nSimulate the SGX setup process; that is, to support all SGX/ENCLS instructions mentioned above. (Hint: you can simulate those instructions by userland function calls).\n\n\nUse the SGX simulator to set up an Enclave environment suitable for loading and running a simple Hello-world C program below.\n\n\n\n\nint main(void){\n  int x = 0;\n  int y = 1;\n  int z = x + y;\n}", 
            "title": "sgx"
        }, 
        {
            "location": "/projs/sgx/#sgxencls", 
            "text": "Intel SGX (Software Guard Extensions), a set of instructions and mechanisms for memory accesses added to future Intel\u00ae Architecture processors\nThe SGX extensions allow an application to instantiate a protected container, referred to as an  enclave . An enclave is a protected area in the application\u2019s address space, which provides confidentiality and integrity even in the presence of privileged malware. Accesses to the enclave memory area from any software not resident in the enclave are prevented.", 
            "title": "SGX/ENCLS"
        }, 
        {
            "location": "/projs/sgx/#mid-term-report", 
            "text": "Read SGX document [ pdf ] (mostly chapter 1,2,3 and 5), understand the semantics of SGX/ENCLS instructions (e.g. EINIT, EREPORT, EEXTEND, ECREATE, etc; see Chapter 5.3).   At its minimal, the mid-term report should include:   The semantics of each SGX system-level instructions (SGX ENCLS). You should explain the working of all ENCLS instructions in the following table (a copy of Table 5-1 from the SGX document).  The in-memory data structures used by SGX instructions (e.g. EPCM, TCS, SSA frames).      Instr. Leaf  EAX  RBX  RCX  RDX      ECREATE  00H (In)  PAGEINFO (In, EA)  EPCPAGE (In, EA)     EADD  01H (In)  PAGEINFO (In, EA)  EPCPAGE (In, EA)     EINIT  02H (In)  SIGSTRUCT (In, EA)  SECS (In, EA)  EINITTOKEN (In, EA)    EREMOVE  03H (In)   EPCPAGE (In, EA)     EDBGRD  04H (In)  Result Data (Out)  EPCPAGE (In, EA)     EDBGWR  05H (In)  Source Data (In)  EPCPAGE (In, EA)     EEXTEND  06H (In)   EPCPAGE (In, EA)     ELDB  07H (In)  PAGEINFO (In, EA)  EPCPAGE (In, EA)  VERSION (In, EA)    ELDU  08H (In)  PAGEINFO (In, EA)  EPCPAGE (In, EA)  VERSION (In, EA)    EBLOCK  09H (In)   EPCPAGE (In, EA)     EPA  0AH (In)  PT_VA (In)  EPCPAGE (In, EA)     EWB  0BH (In)  PAGEINFO (In, EA)  EPCPAGE (In, EA)  VERSION (In, EA)    ETRACK  0CH (In)   EPCPAGE (In, EA)     EAUG  0DH (In)  PAGEINFO (In, EA)  EPCPAGE (In, EA)  LINADDR    EMODPR  0EH (In)  SECINFO (In, EA)  EPCPAGE (In, EA)     EMODT  0FH (In)  SECINFO (In, EA)  EPCPAGE (In, EA)     EA: Effective Address", 
            "title": "Mid-term report"
        }, 
        {
            "location": "/projs/sgx/#jump-start-tasks", 
            "text": "Write a program that calls  EINIT  on the Ubuntu image with SGX emulator installed.", 
            "title": "Jump-start tasks"
        }, 
        {
            "location": "/projs/sgx/#minimally-requirement-tasks", 
            "text": "Simulate the SGX setup process; that is, to support all SGX/ENCLS instructions mentioned above. (Hint: you can simulate those instructions by userland function calls).  Use the SGX simulator to set up an Enclave environment suitable for loading and running a simple Hello-world C program below.   int main(void){\n  int x = 0;\n  int y = 1;\n  int z = x + y;\n}", 
            "title": "Minimally-requirement tasks"
        }
    ]
}